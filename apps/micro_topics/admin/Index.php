<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018/6/24
 * Time: 2:32
 */
namespace app\micro_topics\admin;
use app\admin\controller\Admin;
use app\micro_topics\model\MicroTopics as ListModel;
use app\micro_topics\model\MicroTopicsComment as CommentModel;
use app\common\model\User as UserModel;

class Index extends Admin {

    protected $ListModel;
    protected $CommentModel;
    protected $UserModel;

    function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->ListModel = new ListModel();
        $this->CommentModel = new CommentModel();
        $this->UserModel = new UserModel();
    }


    /*
     * 帖子列表
     * 2018-6-24
     * yyyvy
     * */
    /**
     * @return mixed
     */
    public function index(){

        // 搜索
        $keyword = input('param.keyword');
        if ($keyword) {
            $this->ListModel->where('id|title','like','%'.$keyword.'%');
        }

        // 获取所有文章
        $map['status'] = 1; // 禁用和正常状态

        list($data_list,$total) = $this->ListModel->search('title') //添加搜索查询
                                ->getListByPage($map,true,'create_time desc');
        //遍历数据的分类
        foreach($data_list as &$row){
            $row['category_name'] = db('terms')->where('term_id',$row['category_id'])->find()['name'] ? :'暂无';//获得term名称
            //<span class="fa fa-check text-success"></span>
            $row['recommend'] = $row['recommend']?'<span class="fa fa-check text-success"></span>':'<span class="fa fa-close text-danger"></span>';
            $row['overhead'] = $row['overhead']?'<span class="fa fa-check text-success"></span>':'<span class="fa fa-close text-danger"></span>';
            $row['essence'] = $row['essence']?'<span class="fa fa-check text-success"></span>':'<span class="fa fa-close text-danger"></span>';
        }


        return builder('List')
            ->setMetaTitle('帖子列表') // 设置页面标题
            ->addTopButton('addnew',['data-pjax'=>'true'])  // 添加新增按钮
            ->addTopButton('resume',['model'=>'micro_topics'])  // 添加启用按钮
            ->addTopButton('forbid',['model'=>'micro_topics'])  // 添加禁用按钮
            ->addTopButton('recycle',['model'=>'micro_topics']) //添加回收按钮
            ->setSearch('输入关键字','')
            ->keyListItem('id', 'ID')
            ->keyListItem('cover','缩略图','picture')
            ->keyListItem('title', '标题')
            ->keyListItem('category_name','分类')
            ->keyListItem('view','浏览量')
            ->keyListItem('comment','回复量')
            ->keyListItem('recommend', '推荐')
            ->keyListItem('overhead', '置顶')
            ->keyListItem('essence', '精华')
            ->keyListItem('status', '状态', 'status')
            ->keyListItem('right_button', '操作', 'btn')
            ->setListData($data_list)    // 数据列表
            ->setListPage($total) // 数据列表分页
            ->addRightButton('self',array('title' => '回复列表','class'=>'btn btn-success btn-xs','href'=>url('/micro_topics/index/replylist/id/__data_id__')))
            ->addRightButton('edit')
            ->addRightButton('recycle',['model'=>'micro_topics'])
            ->fetch();
    }



    /*
     *  编辑/新增 帖子
     *  2018-6-24
     *  yyyvy
     * */
    public function edit($id=0){
        $title = $id>0 ? "编辑":"新增";

        //修改
        if(IS_POST){
            $data = $this->request->param();

            $data['uid'] = is_login();
            $data['status'] = 1;
            $data['content'] = htmlspecialchars_decode($data['content']);

            //验证数据
            $this->validateData($data,'Index.edit');

            $result = $this->ListModel->editData($data);
            //print_r($data);die;
            if($result){
                $this ->success($title.'成功','index');
            } else{
                $this ->error($this->ListModel->getError());
            }

        } else{

            $this->assign('page_config',['disable_panel'=>true]);
            $this->assign('meta_title',$title.'帖子');

            $info = [
                'content'=>'',
                'respond_visible'=>'',
                'img'=>'',
                'cover'=>'',
                'category_id'=>''
            ];
            if ($id>0) {
                $info = $this->ListModel->get($id);
            }

            $this->assign('info',$info);
            $this->assign('form_url',url('edit',['id'=>$id]));
            $this->assign('category',logic('Category')->getOptTerms());
            return $this->fetch();
        }
    }




    /*
     *  回复列表
     *  2018-6-26
     *  yyyvy
     * */
    public function replylist($id){
        // 获取所有文章
        $map['topic_id'] = $id; // 禁用和正常状态

        list($data_list,$total) = $this->CommentModel->search('title') //添加搜索查询
                                    ->getListByPage($map,true,'status desc,create_time desc');
        //print_r($data_list);die;
        //遍历数据的用户
        foreach ($data_list as $value){
            $userinfo = $this->UserModel->where('uid', $value['uid'])->find();
            $value['nickname'] = $userinfo['nickname'];
        }

        return builder('List')
            ->setMetaTitle('评论列表') // 设置页面标题
            ->addTopButton('self',array('title' => '新增','icon'=>'fa fa-edit','class'=>'btn btn-primary btn-sm','href'=>url('/micro_topics/index/replylistedit/id/0')))
            //->addTopButton('resume',array('model'=>'Index'))  // 添加启用按钮
            /*->addTopButton('forbid',array('model'=>'Index'))  // 添加禁用按钮
            ->addTopButton('recycle',array('model'=>'Index')) //添加回收按钮*/
            ->keyListItem('id', 'ID')
            ->keyListItem('uid', 'UID')
            ->keyListItem('nickname', '发布者')
            ->keyListItem('content', '内容')
            ->keyListItem('create_time', '评论时间')
            ->keyListItem('status', '状态', 'status')
            ->keyListItem('right_button', '操作', 'btn')
            ->setListData($data_list)    // 数据列表
            ->setListPage($total) // 数据列表分页
            ->addRightButton('self',array('title' => '编辑','icon'=>'fa fa-edit','class'=>'btn btn-primary btn-xs','href'=>url('/micro_topics/index/replylistedit/id/__data_id__')))
            ->addRightButton('delete',['model'=>'micro_topics_comment'])
            ->fetch();
    }

    /*
     *  回复新增/编辑
     *  2018-6-26
     *  yyyvy
     * */
    public function replylistedit($id=0){
        $title = $id>0 ? "编辑":"新增";
        //修改
        if(IS_POST){
            $data = $this->request->param();
            $data['uid']?$data['uid']:is_login();
            $data['content'] = htmlspecialchars_decode($data['content']);
            $result = $this->CommentModel->editData($data);
            //print_r($data);die;
            if($result){
                $this ->success($title.'成功','');
            } else{
                $this ->error($this->CommentModel->getError());
            }
        } else{
            $info = [];
            if ($id>0) {
                $info = $this->CommentModel->get($id);
            }
            return builder('Form')
                ->setMetaTitle($title.'评论')  // 设置页面标题
                ->addFormItem('id', 'hidden', 'id', 'id')
                ->addFormItem('uid', 'hidden', 'uid', 'uid')
                ->addFormItem('content', 'wangeditor', '评论内容', '')
                ->setFormData($info)
                ->fetch();
        }
    }



    /**
     * 设置一条或者多条数据的状态
     * @date   2017-12-29 10:42:57
     * @author yyyvy <76836785@qq.com>
     */
    public function setStatus($model = 'micro_topics',$script = false) {
        $ids = input('param.ids/a');
        $status = input('param.status');
        if (empty($ids)) {
            $this->error('请选择要操作的数据');
        }
        $map['id'] = ['in',$ids];

        switch ($status) {
            case 'delete' :  // 删除条目
                if($model == 'micro_topics_comment'){
                    $model = model($model);
                    $model_primary_key = $model->getPk();
                    $map[$model_primary_key] = ['in',$ids];
                    $exist = $model->where($map)->select();
                    if ($exist) {
                        $result = $model->where($map)->delete();
                    } else {
                        $result = true;
                    }
                    if ($result) {
                        $this->success('彻底删除成功');
                    } else {
                        $this->error('删除失败');
                    }
                }else{
                    $map['status'] = -1;
                    $exist = $this->ListModel->where($map)->get();
                    if ($exist) {
                        $result = $this->ListModel->delete($ids);
                    } else {
                        $result = true;
                    }
                    if ($result) {
                        $this->success('彻底删除成功');

                    } else {
                        $this->error('删除失败');
                    }
                }
                break;
            default :
                parent::setStatus($model);
                break;
        }
    }


    /**
     * 回收站页面
     * @date   2018-6-27
     * @author yyyvy <76836785@qq.com>
     */
    function trash(){
        // 获取所有文章
        $map['status'] = ['in',[-1]]; // 禁用和正常状态

        list($data_list,$total) = $this->ListModel->getListByPage($map,true,'create_time desc');
        //遍历数据
        foreach($data_list as $k=>$data){
            $data['category_name'] = db('terms')->where('term_id',$data['category_id'])->find()['name'] ? :'暂无';//获得term名称
        }

        return builder('List')
            ->setMetaTitle('回收站') // 设置页面标题
            ->addTopButton('restore',['model'=>'micro_topics'])  // 添加启用按钮
            ->addTopButton('delete',['model'=>'micro_topics'])  // 添加删除按钮
            ->setSearch('输入标题','')
            ->keyListItem('title', '标题')
            ->keyListItem('category_name','分类')
            ->keyListItem('create_time','发布时间')
            ->keyListItem('status', '状态', 'status')
            ->keyListItem('right_button', '操作', 'btn')
            ->setListPrimaryKey('id')
            ->setListData($data_list)    // 数据列表
            ->setListPage($total) // 数据列表分页
            ->addRightButton('edit',array('href'=>url('edit',['id'=>'__data_id__'])))  // 添加编辑按钮
            ->addRightButton('delete',['model'=>'micro_topics'])  // 添加删除按钮
            ->fetch();
    }






}